import { useState,useEffect } from "react";
import { AiTwotoneHome } from "react-icons/ai"; 
import EditCareerPopup from "./edie";
import axios from 'axios';
function App() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedCareer, setSelectedCareer] = useState(null);
  const [careers, setCareers] = useState([]); // State to hold career cards
  const [expandedCardIndex, setExpandedCardIndex] = useState(null);
  const [currentPage, setCurrentPage] = useState(1); // Pagination state
  const [jobPostDetails, setJobPostDetails] = useState(null); //addedsunday
  const jobsPerPage = 5;
//sunday added...
const backendBaseURL = "http://192.168.0.119:8080/hrmsapplication/carrers"//addedsunday
  useEffect(() => {
    fetchJobPosts();
  }, []);

  const fetchJobPosts = async () => {
    try {
      
      const response = await axios.get(`${backendBaseURL}/getJobPosts?pageNumber=${currentPage - 1}&size=${jobsPerPage}`);
      const jobPosts = response.data;
      setCareers(jobPosts);
    } catch (error) {
      console.error(error);
    }
  };
  const fetchJobPostDetails = async (postId) => {
    try {
      const response = await axios.get(`${backendBaseURL}/postId/${postId}`);
      const jobPostDetails = response.data;
      // Update the state with the fetched job post details
      setJobPostDetails(jobPostDetails);
    } catch (error) {
      console.error(error);
    }
  };
  //.........
   const handleAddClick = () => {
    setIsModalOpen(true);
    setSelectedCareer(null);
  };

  const handleSaveCareer = (careerData) => {
    if (selectedCareer !== null) {
      const updatedCareers = careers.map((career) =>
        career === selectedCareer ? careerData : career
      );
      setCareers(updatedCareers);
    } else {
      setCareers([...careers, careerData]);
    }  
    setIsModalOpen(false);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  const toggleExpandCard = (index) => {
    setExpandedCardIndex(expandedCardIndex === index ? null : index);
    const career = currentCareers[index];
    fetchJobPostDetails(career.postId);
  };

  const handleEditClick = (career) => {
    setSelectedCareer(career);
    setIsModalOpen(true);
  };

  const handleDeleteClick = (career) => {
    const updatedCareers = careers.filter((c) => c !== career);
    setCareers(updatedCareers);

    const newTotalPages = Math.ceil(updatedCareers.length / jobsPerPage);
    if (currentPage > newTotalPages) {
      setCurrentPage(newTotalPages);
    }
  };

  // Pagination logic: Calculate jobs to display on the current page
  const indexOfLastJob = currentPage * jobsPerPage;
  const indexOfFirstJob = indexOfLastJob - jobsPerPage;
  const currentCareers = careers.slice(indexOfFirstJob, indexOfLastJob);

  const totalPages = Math.ceil(careers.length / jobsPerPage);

  const handlePageClick = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  // Generate an array of page numbers
  const pageNumbers = [];
  for (let i = 1; i <= totalPages; i++) {
    pageNumbers.push(i);
  }

  
  return (
    <>
      <div className="grid-col-4">
        <div className="w-full lg:w-10/12 xl:w-9/12 mx-auto mt-7 bg-white rounded-md border border-black/90 shadow-md p-3">
          <div className="flex justify-between items-center">
            <div className="flex items-center">
              <AiTwotoneHome size={20} className="mr-2" />
              <h1 className="text-lg font-bold">Careers Masters</h1>
            </div>
            <div className="flex gap-3 items-center">
              <button className="px-4 py-2 bg-blue-600 text-white rounded-lg">
                Export to Excel
              </button>
              <button
                onClick={handleAddClick}
                className="w-[73px] h-[36px] rounded-[6px] bg-[#003179] text-white"
              >
                Add
              </button>
            </div>
          </div>
        </div>

        <div className="w-full lg:w-10/12 xl:w-9/12 mx-auto mt-7 grid grid-cols-1 sm:grid-cols-2 gap-6">
          {currentCareers.map((career, index) => (
            <div
              key={index}
              className={`p-6 bg-white rounded-lg shadow-md border cursor-pointer transition-all duration-300 ease-in-out 
                ${expandedCardIndex === index ? "h-auto" : "h-40 overflow-hidden"}`}
              onClick={() => toggleExpandCard(index)} // Handle card click
            >
              <h2 className="text-lg font-bold">{career.jobTitle}</h2>
              <p className="text-base font-bold mb-2">
                Location:<span className="text-xs text-gray-700 pl-3"> {career.jobLocation}</span>
              </p>
              <p className="text-sm font-bold">
                Role: <span className="text-xs text-gray-700 pl-3">{career.jobType}</span>
              </p>
              <p className="text-sm font-bold">
                Experience: <span className="text-xs text-gray-700 pl-3">{career.experienceYear} years and {career.experienceMonth} months</span>
              </p>
              <p className="text-sm font-bold">
                Age: <span className="text-xs text-gray-700 pl-3">{career.age}</span>
              </p>

              {/* {expandedCardIndex === index && ( //changed sunnday
               */}
               {expandedCardIndex !== null && (
                <>
                  <p className="text-sm font-bold">
                    WorkMode:<span className="text-xs text-gray-700 pl-3">{career.workMode}</span>
                  </p>
                  <p className="text-sm font-bold">
                    Requirements:<span className="text-xs text-gray-700 pl-3">{career.noOfRequirement}</span>
                  </p>
                  <p className="text-sm font-bold">
                    Salary:<span className="text-xs text-gray-700 pl-4">{career.salaryFrom} - {career.salaryTo}</span>
                  </p>
                  <p className="text-sm font-bold">
                    Published Date:<span className="text-xs text-gray-700 mb-2 pl-2">{career.publishDate}</span>
                  </p>
                  <p className="text-sm font-bold">
                    Expired Date:<span className="text-xs text-gray-700 pl-3">{career.expiredDate}</span>
                  </p>
                  <p className="text-sm font-bold">
                    Skill Set:<span className="text-xs text-gray-700 pl-3">{career.skillSet}</span>
                  </p>
                  <p className="text-sm font-bold">
                    Job Description: <span className="text-xs text-gray-700">{career.jobDescription}</span>
                  </p>
                  <p className="text-base font-bold mt-5">Status: Published</p>
                </>
              )}

              <div className="flex justify-end mt-2">
                <button
                  className="flex float-end justify-end px-4 py-2 mt-2 mr-2 bg-white text-black border border-[#003179] rounded-lg"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleDeleteClick(career);
                  }}
                >
                  Delete
                </button>
                <button
                  className="flex float-end justify-end px-4 py-2 mt-2 bg-[#003179] text-white rounded-lg"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleEditClick(career);
                  }}
                >
                  Edit
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Pagination Controls with Page Numbers */}
        {totalPages > 1 && (
          <div className="flex justify-center mt-4">
            {pageNumbers.map((number) => (
              <button
                key={number}
                onClick={() => handlePageClick(number)}
                className={`px-4 py-2 mx-1 rounded-lg ${
                  currentPage === number
                    ? "bg-blue-600 text-white"
                    : "bg-gray-200 text-gray-700 hover:bg-blue-500 hover:text-white"
                }`}
              >
                {number}
              </button>
            ))}
          </div>
        )}
      </div>

      {isModalOpen && (
        <EditCareerPopup
          onSave={handleSaveCareer}
          onClose={handleCloseModal}
          career={selectedCareer}
        />
      )}
    </>
  );
}

export default App;